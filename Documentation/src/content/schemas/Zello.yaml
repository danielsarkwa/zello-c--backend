openapi: 3.0.1
info:
  title: Zello API
  version: v1
paths:
  /api/v1/Comments:
    get:
      tags:
        - Comments
      summary: Retrieves comments with optional filtering by task ID.
      parameters:
        - name: taskId
          in: query
          description: Optional. The ID of the task to filter comments by.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the list of comments.
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
        '400':
          description: If the user ID is missing from the claims.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to view the comments.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Comments
      summary: Creates a new comment on a task.
      description: "Sample request:\r\n            \r\n    POST /api/v1/comments\r\n    {\r\n        \"task_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n        \"content\": \"This is a comment\"\r\n    }"
      requestBody:
        description: The comment creation request containing the task ID and comment content.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
      responses:
        '201':
          description: Returns the newly created comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
        '400':
          description: If the request is invalid or user ID is missing.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the specified task was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to the task's project.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Comments/{commentId}':
    get:
      tags:
        - Comments
      summary: Retrieves a specific comment by its ID.
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to retrieve.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
        '400':
          description: If the user ID is missing from the claims.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the comment with the specified ID was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to view the comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Comments
      summary: Updates an existing comment.
      description: "Sample request:\r\n            \r\n    PUT /api/v1/comments/{commentId}\r\n    {\r\n        \"content\": \"Updated comment text\"\r\n    }\r\n            \r\nOnly the comment owner or an admin can update the comment."
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The update request containing the new comment content.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentUpdateDto'
      responses:
        '200':
          description: Returns the updated comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
        '400':
          description: If the request is invalid or user ID is missing.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the comment with the specified ID was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to update the comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Comments
      summary: Deletes a specific comment.
      description: Only the comment owner or an admin can delete the comment.
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: If the comment was successfully deleted.
        '400':
          description: If the user ID is missing from the claims.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the comment with the specified ID was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to delete the comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/List/{listId}':
    get:
      tags:
        - List
      summary: Retrieves a specific list by its ID
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to access this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - List
      summary: Updates an existing list
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated list data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
      responses:
        '200':
          description: List was successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '400':
          description: The request data is invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to update this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/List:
    get:
      tags:
        - List
      summary: Retrieves all lists accessible to the current user
      parameters:
        - name: projectId
          in: query
          description: Optional project ID to filter lists by project
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns all accessible lists
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
        '403':
          description: User does not have permission to access lists
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/List/{listId}/position':
    put:
      tags:
        - List
      summary: Updates the position of a list within its project
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to reposition
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The update data containing the new position
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
      responses:
        '200':
          description: List position was successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '400':
          description: The requested position is invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to update list positions
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: An error occurred while updating the list position
  '/api/v1/List/{listId}/tasks':
    post:
      tags:
        - List
      summary: Creates a new task in the specified list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The task data to create
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
      responses:
        '201':
          description: Task was successfully created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
        '400':
          description: The task data is invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to create tasks in this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: An error occurred while creating the task
    get:
      tags:
        - List
      summary: Retrieves all tasks in a specific list
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns all tasks in the list
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to access this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: An error occurred while retrieving tasks
  /api/v1/Project:
    post:
      tags:
        - Project
      summary: Creates a new project
      description: "Sample request:\r\n            \r\n    POST /api/v1/Project\r\n    {\r\n        \"name\": \"New Project\",\r\n        \"description\": \"Project description\",\r\n        \"workspace_id\": \"123e4567-e89b-12d3-a456-426614174000\",\r\n        \"start_date\": \"2024-01-01\",\r\n        \"end_date\": \"2024-12-31\",\r\n        \"status\": \"NotStarted\"\r\n    }\r\n            \r\nRequired permissions:\r\n- Workspace member access"
      requestBody:
        description: Project creation details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
      responses:
        '201':
          description: Project successfully created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
        '400':
          description: Invalid project data or user ID is null
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User is not a member of the workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Project
      summary: Retrieves all projects accessible to the user
      description: "For non-admin users, returns only projects where they are a member.\r\nAdmin users can see all projects.\r\n            \r\nOptional query parameter:\r\n- workspaceId: Filter projects by workspace"
      parameters:
        - name: workspaceId
          in: query
          description: Optional workspace ID to filter projects
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns list of accessible projects
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
        '403':
          description: Insufficient permissions
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
  /api/v1/Project/members/access:
    put:
      tags:
        - Project
      summary: Updates the access level of a project member
      description: "Requires the following permissions:\r\n- Admin access, or\r\n- Project Owner access level\r\n            \r\nAccess level restrictions:\r\n- Cannot assign higher access than your own level (except admins)\r\n- Cannot exceed member's workspace access level\r\n- Cannot modify access if you're below Owner level"
      requestBody:
        description: The member elevation details including member ID and new access level
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
      responses:
        '200':
          description: Member access level successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
        '400':
          description: Invalid elevation data provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Project member not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to modify access levels
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Project/{projectId}':
    get:
      tags:
        - Project
      summary: Retrieves a project by its ID
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the project
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested project
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
        '404':
          description: Project not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to this project
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
    put:
      tags:
        - Project
      summary: Updates an existing project
      description: "Sample request:\r\n            \r\n    PUT /api/v1/Project/{projectId}\r\n    {\r\n        \"name\": \"Updated Name\",\r\n        \"description\": \"Updated description\",\r\n        \"startDate\": \"2024-02-01\",\r\n        \"endDate\": \"2024-12-31\",\r\n        \"status\": \"InProgress\"\r\n    }\r\n            \r\nRequired permissions:\r\n- Project Owner access level, or\r\n- Admin access"
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the project to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated project details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
      responses:
        '200':
          description: Project successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
        '400':
          description: Invalid update data or user ID is null
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Project not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to update project
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Project
      summary: Deletes a project
      description: "Required permissions:\r\n- Project Owner access level, or\r\n- Admin access"
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the project to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project successfully deleted
        '404':
          description: Project not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to delete project
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
  /api/v1/Project/members:
    post:
      tags:
        - Project
      summary: Adds a new member to a project
      description: "Sample request:\r\n            \r\n    POST /api/v1/Project/members\r\n    {\r\n        \"project_id\": \"123e4567-e89b-12d3-a456-426614174000\",\r\n        \"workspace_member_id\": \"123e4567-e89b-12d3-a456-426614174001\",\r\n        \"access_level\": \"Member\"\r\n    }\r\n            \r\nRequired permissions:\r\n- Project Owner access level, or\r\n- Admin access"
      requestBody:
        description: Project member details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
      responses:
        '201':
          description: Member successfully added to project
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
        '400':
          description: Invalid member data or user ID is null
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Project or workspace member not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to add members
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Project/{projectId}/lists':
    post:
      tags:
        - Project
      summary: Creates a new list in a project
      description: "Sample request:\r\n            \r\n    POST /api/v1/Project/{projectId}/lists\r\n    {\r\n        \"name\": \"New List\",\r\n        \"tasks\": [\r\n            {\r\n                \"name\": \"Task 1\",\r\n                \"description\": \"Task description\",\r\n                \"status\": \"ToDo\",\r\n                \"priority\": \"Medium\"\r\n            }\r\n        ]\r\n    }\r\n            \r\nRequired permissions:\r\n- Project member access"
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: List creation details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
      responses:
        '201':
          description: List successfully created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '400':
          description: Invalid list data or user ID is null
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Project not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User is not a project member
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Project
      summary: Retrieves all lists in a project
      description: "Required permissions:\r\n- Project member access"
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the project
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the project's lists
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
        '404':
          description: Project not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to this project
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
  '/api/v1/Task/{taskId}':
    get:
      tags:
        - Task
      summary: Retrieves a specific task by ID
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested task
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
        '404':
          description: Task not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to this task
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Task
      summary: Updates an existing task
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated task details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
      responses:
        '200':
          description: Task successfully updated
        '400':
          description: Invalid update data
        '403':
          description: User does not have access to this task
        '404':
          description: Task not found
    delete:
      tags:
        - Task
      summary: Deletes a task
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task successfully deleted
        '404':
          description: Task not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to delete this task
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Task:
    get:
      tags:
        - Task
      summary: Retrieves all tasks accessible to the user
      description: "Returns:\r\n- All tasks for Admin users\r\n- Only tasks in projects where the user is a member for non-Admin users"
      responses:
        '200':
          description: List of accessible tasks
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
        '400':
          description: User ID is missing
  '/api/v1/Task/{taskId}/move':
    post:
      tags:
        - Task
      summary: Moves a task to a different list
      description: "Sample request:\r\n            \r\n    POST /api/v1/Task/{taskId}/move\r\n    {\r\n        \"targetListId\": \"123e4567-e89b-12d3-a456-426614174000\"\r\n    }"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task to move
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Move request containing target list ID
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
      responses:
        '200':
          description: Task successfully moved
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
        '400':
          description: Invalid move request or target list does not exist
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Task not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to move this task
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}/assignees':
    post:
      tags:
        - Task
      summary: Assigns a user to a task
      description: "Sample request:\r\n            \r\n    POST /api/v1/Task/{taskId}/assignees\r\n    {\r\n        \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\"\r\n    }"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Assignment request containing user ID
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
      responses:
        '201':
          description: User successfully assigned to task
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskAssigneeReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskAssigneeReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskAssigneeReadDto'
        '400':
          description: Invalid assignment request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Task or user not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to assign users
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Task
      summary: Retrieves all assignees of a task
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of task assignees
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssigneeReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssigneeReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssigneeReadDto'
        '404':
          description: Task not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to view task assignees
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}/assignees/{userId}':
    delete:
      tags:
        - Task
      summary: Removes an assignee from a task
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: The ID of the user to remove from the task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Assignee successfully removed
        '404':
          description: Task or assignee not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to remove assignee
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}/comments':
    get:
      tags:
        - Task
      summary: Retrieves all comments on a task
      description: "Required permissions:\r\n- Project member access, or\r\n- Admin access"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of task comments
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
        '404':
          description: Task not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to view task comments
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Task
      summary: Adds a new comment to a task
      description: "Sample request:\r\n            \r\n    POST /api/v1/Task/{taskId}/comments\r\n    {\r\n        \"content\": \"This is a comment on the task\"\r\n    }"
      parameters:
        - name: taskId
          in: path
          description: The unique identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Comment creation request
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '201':
          description: Comment successfully added
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
        '400':
          description: Invalid comment data
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Comment not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to comment on this task
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/login:
    post:
      tags:
        - User
      summary: Authenticates a user and returns a JWT token
      description: "Sample request:\r\n            \r\n    POST /api/v1/User/login\r\n    {\r\n        \"username\": \"johndoe\",\r\n        \"password\": \"password123\"\r\n    }"
      requestBody:
        description: Login credentials
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/extend-session:
    post:
      tags:
        - User
      summary: Extends the current valid JWT token session
      description: "This endpoint allows refreshing a still-valid token to maintain an active session.\r\nThe current token must be valid and included in the Authorization header."
      responses:
        '200':
          description: Returns new access token
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Current token is invalid or expired
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/me:
    get:
      tags:
        - User
      summary: Retrieves the current authenticated user's information
      description: Requires authentication via JWT token
      responses:
        '200':
          description: Returns the current user's information
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
        '401':
          description: User is not authenticated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/register:
    post:
      tags:
        - User
      summary: Registers a new user
      description: "Sample request:\r\n            \r\n    POST /api/v1/User/register\r\n    {\r\n        \"userName\": \"johndoe\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"john.doe@example.com\",\r\n        \"password\": \"password123\",\r\n        \"accessLevel\": \"Member\"\r\n    }"
      requestBody:
        description: User registration details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '201':
          description: User successfully registered
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
        '400':
          description: Invalid registration data or username already exists
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/User/{userId}':
    get:
      tags:
        - User
      summary: Retrieves a user by their ID
      description: Users can only view their own profile unless they have Admin access
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested user's information
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to view user
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - User
      summary: Updates a user's information
      description: Users can only update their own profile unless they have Admin access
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user information
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
      responses:
        '200':
          description: User successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
        '400':
          description: Invalid update data
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to update user
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - User
      summary: Deletes a user account
      description: Users can only delete their own account unless they have Admin access
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to delete user
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User:
    get:
      tags:
        - User
      summary: Retrieves all users in the system
      description: "Required permissions:\r\n- Admin access level"
      responses:
        '200':
          description: Returns list of all users
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReadDto'
        '403':
          description: User is not an administrator
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Workspaces/{workspaceId}':
    delete:
      tags:
        - Workspaces
      summary: Deletes a workspace
      description: "Required permissions:\r\n- Workspace Owner access level, or\r\n- Admin access"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workspace successfully deleted
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to delete workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
    get:
      tags:
        - Workspaces
      summary: Retrieves a specific workspace by ID
      description: "Required permissions:\r\n- Workspace member access, or\r\n- Admin access"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to access workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
    put:
      tags:
        - Workspaces
      summary: Updates an existing workspace
      description: "Required permissions:\r\n- Workspace Owner access level, or\r\n- Admin access"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated workspace details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
      responses:
        '200':
          description: Workspace successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to update workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid update data or user ID is null
  /api/v1/Workspaces/members/access:
    put:
      tags:
        - Workspaces
      summary: Updates a workspace member's access level
      description: "Required permissions:\r\n- Workspace Owner access level, or\r\n- Admin access\r\n            \r\nAccess level restrictions:\r\n- Cannot assign higher access than your own level (except admins)\r\n- Cannot modify access if you're below Owner level"
      requestBody:
        description: The member elevation details including member ID and new access level
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
      responses:
        '200':
          description: Member access level successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace member not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to modify access levels
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid elevation data or user ID is null
  /api/v1/Workspaces:
    get:
      tags:
        - Workspaces
      summary: Retrieves all workspaces accessible to the user
      description: "Returns:\r\n- All workspaces for Admin users\r\n- Only workspaces where the user is a member for non-Admin users"
      responses:
        '200':
          description: List of accessible workspaces
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceReadDto'
        '400':
          description: User ID is null
    post:
      tags:
        - Workspaces
      summary: Creates a new workspace
      description: "Sample request:\r\n            \r\n    POST /api/v1/Workspaces\r\n    {\r\n        \"name\": \"New Workspace\"\r\n    }\r\n            \r\nThe creator is automatically added as a workspace owner."
      requestBody:
        description: Workspace creation details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
      responses:
        '201':
          description: Workspace successfully created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
        '400':
          description: Invalid workspace data or user ID is null
  '/api/v1/Workspaces/{workspaceId}/members':
    get:
      tags:
        - Workspaces
      summary: Retrieves all members of a workspace
      description: "Required permissions:\r\n- Workspace member access, or\r\n- Admin access"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of workspace members
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to view members
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
    post:
      tags:
        - Workspaces
      summary: Adds a new member to a workspace
      description: "Required permissions:\r\n- Workspace Owner access level, or\r\n- Admin access"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Member creation details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
      responses:
        '201':
          description: Member successfully added to workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to add members
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid member data or user ID is null
  '/api/v1/Workspaces/{workspaceId}/projects':
    get:
      tags:
        - Workspaces
      summary: Retrieves all projects in a workspace
      description: "Required permissions:\r\n- Workspace member access, or\r\n- Admin access"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of workspace projects
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to view projects
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User ID is null
  '/api/v1/Workspaces/members/{memberId}/access':
    put:
      tags:
        - Workspaces
      summary: Updates a member's access level within a workspace
      description: "Required permissions:\r\n- Workspace Owner access level, or\r\n- Admin access\r\n            \r\nAccess level restrictions:\r\n- Cannot assign higher access than your own level (except admins)\r\n- Cannot modify access if you're below Owner level"
      parameters:
        - name: memberId
          in: path
          description: The unique identifier of the workspace member
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated access level details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberUpdateDto'
      responses:
        '200':
          description: Member access level successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace or member not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to modify access levels
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid update data or user ID is null
components:
  schemas:
    AccessLevel:
      enum:
        - 0
        - 10
        - 20
        - 30
      type: integer
      format: int32
    AddCommentRequest:
      required:
        - content
      type: object
      properties:
        content:
          maxLength: 500
          minLength: 0
          type: string
      additionalProperties: false
    AssignUserRequest:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
      additionalProperties: false
    CommentCreateDto:
      required:
        - content
        - taskId
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        content:
          maxLength: 500
          minLength: 3
          type: string
      additionalProperties: false
    CommentReadDto:
      required:
        - content
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/UserReadDto'
      additionalProperties: false
    CommentUpdateDto:
      required:
        - content
      type: object
      properties:
        content:
          maxLength: 500
          minLength: 3
          type: string
          nullable: true
      additionalProperties: false
    CurrentTaskStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ListCreateDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 3
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskCreateDto'
          nullable: true
      additionalProperties: false
    ListReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        position:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskReadDto'
          nullable: true
      additionalProperties: false
    ListUpdateDto:
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
          nullable: true
        position:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
      additionalProperties: false
    LoginResponse:
      required:
        - accessLevel
        - description
        - token
        - tokenType
      type: object
      properties:
        token:
          type: string
          nullable: true
        expires:
          type: string
          format: date-time
        tokenType:
          type: string
          nullable: true
        accessLevel:
          type: string
          nullable: true
        numericLevel:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
      additionalProperties: false
    MemberElevationDto:
      required:
        - memberId
        - newAccessLevel
      type: object
      properties:
        memberId:
          type: string
          format: uuid
        newAccessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    MoveTaskRequest:
      type: object
      properties:
        targetListId:
          type: string
          format: uuid
      additionalProperties: false
    Priority:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      format: int32
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    ProjectCreateDto:
      required:
        - name
        - status
        - workspaceId
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        workspaceId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
          nullable: true
        endDate:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
      additionalProperties: false
    ProjectMemberCreateDto:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        workspaceMemberId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    ProjectMemberReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        workspaceMemberId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
        workspaceMember:
          $ref: '#/components/schemas/WorkspaceMemberReadDto'
      additionalProperties: false
    ProjectReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
        createdDate:
          type: string
          format: date-time
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberReadDto'
          nullable: true
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListReadDto'
          nullable: true
      additionalProperties: false
    ProjectStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ProjectUpdateDto:
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
          nullable: true
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/ProjectStatus'
      additionalProperties: false
    TaskAssigneeReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        assignedDate:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/UserReadDto'
      additionalProperties: false
    TaskCreateDto:
      required:
        - listId
        - name
        - status
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 3
          type: string
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        deadline:
          type: string
          format: date-time
          nullable: true
        projectId:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
      additionalProperties: false
    TaskReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        priority:
          $ref: '#/components/schemas/Priority'
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        deadline:
          type: string
          format: date-time
          nullable: true
        createdDate:
          type: string
          format: date-time
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssigneeReadDto'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentReadDto'
          nullable: true
        list:
          $ref: '#/components/schemas/ListReadDto'
        project:
          $ref: '#/components/schemas/ProjectReadDto'
      additionalProperties: false
    TaskUpdateDto:
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        deadline:
          type: string
          format: date-time
      additionalProperties: false
    TokenRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    UserCreateDto:
      required:
        - accessLevel
        - email
        - name
        - password
        - username
      type: object
      properties:
        username:
          maxLength: 20
          minLength: 3
          type: string
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
          format: email
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    UserReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    UserUpdateDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    WorkspaceCreateDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
      additionalProperties: false
    WorkspaceMemberCreateDto:
      required:
        - accessLevel
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    WorkspaceMemberReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
      additionalProperties: false
    WorkspaceMemberUpdateDto:
      required:
        - role
      type: object
      properties:
        role:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    WorkspaceReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        ownerId:
          type: string
          format: uuid
        createdDate:
          type: string
          format: date-time
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectReadDto'
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMemberReadDto'
          nullable: true
      additionalProperties: false
    WorkspaceUpdateDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: JWT Authorization header using the Bearer scheme
      scheme: bearer
security:
  - Bearer: [ ]