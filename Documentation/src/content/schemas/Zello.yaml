openapi: 3.0.1
info:
  title: Zello API
  version: v1
paths:
  /api/v1/Comments:
    get:
      tags:
        - Comments
      summary: Retrieves comments with optional filtering by task ID.
      parameters:
        - name: taskId
          in: query
          description: Optional. The ID of the task to filter comments by.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the list of comments.
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: If the user ID is missing from the claims.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to view the comments.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Comments
      summary: Creates a new comment on a task.
      description: "Sample request:\r\n            \r\n    POST /api/v1/comments\r\n    {\r\n        \"task_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n        \"content\": \"This is a comment\"\r\n    }"
      requestBody:
        description: The comment creation request containing the task ID and comment content.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Returns the newly created comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: If the request is invalid or user ID is missing.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the specified task was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to the task's project.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Comments/{commentId}':
    get:
      tags:
        - Comments
      summary: Retrieves a specific comment by its ID.
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to retrieve.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: If the user ID is missing from the claims.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the comment with the specified ID was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to view the comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Comments
      summary: Updates an existing comment.
      description: "Sample request:\r\n            \r\n    PUT /api/v1/comments/{commentId}\r\n    {\r\n        \"content\": \"Updated comment text\"\r\n    }\r\n            \r\nOnly the comment owner or an admin can update the comment."
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The update request containing the new comment content.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Returns the updated comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: If the request is invalid or user ID is missing.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the comment with the specified ID was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to update the comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Comments
      summary: Deletes a specific comment.
      description: Only the comment owner or an admin can delete the comment.
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: If the comment was successfully deleted.
        '400':
          description: If the user ID is missing from the claims.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the comment with the specified ID was not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: If the user doesn't have access to delete the comment.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/List/{listId}':
    get:
      tags:
        - List
      summary: Retrieves a specific list by its ID
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns the requested list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to access this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - List
      summary: Updates an existing list
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated list data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
      responses:
        '200':
          description: List was successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '400':
          description: The request data is invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to update this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/List:
    get:
      tags:
        - List
      summary: Retrieves all lists accessible to the current user
      parameters:
        - name: projectId
          in: query
          description: Optional project ID to filter lists by project
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns all accessible lists
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
        '403':
          description: User does not have permission to access lists
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/List/{listId}/position':
    put:
      tags:
        - List
      summary: Updates the position of a list within its project
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to reposition
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The update data containing the new position
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ListUpdateDto'
      responses:
        '200':
          description: List position was successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '400':
          description: The requested position is invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to update list positions
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: An error occurred while updating the list position
  '/api/v1/List/{listId}/tasks':
    post:
      tags:
        - List
      summary: Creates a new task in the specified list
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list to add the task to
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The task data to create
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TaskCreateDto'
      responses:
        '201':
          description: Task was successfully created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
        '400':
          description: The task data is invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to create tasks in this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: An error occurred while creating the task
    get:
      tags:
        - List
      summary: Retrieves all tasks in a specific list
      parameters:
        - name: listId
          in: path
          description: The unique identifier of the list
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns all tasks in the list
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
        '404':
          description: List with specified ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to access this list
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: An error occurred while retrieving tasks
  /api/v1/Project:
    post:
      tags:
        - Project
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Project
      parameters:
        - name: workspaceId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Project/members/access:
    put:
      tags:
        - Project
      summary: Updates the access level of a project member
      description: "Requires the following permissions:\r\n- Admin access, or\r\n- Project Owner access level\r\n            \r\nAccess level restrictions:\r\n- Cannot assign higher access than your own level (except admins)\r\n- Cannot exceed member's workspace access level\r\n- Cannot modify access if you're below Owner level"
      requestBody:
        description: The member elevation details including member ID and new access level
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
      responses:
        '200':
          description: Member access level successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
        '400':
          description: Invalid elevation data provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Project member not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to modify access levels
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Project/{projectId}':
    get:
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateDto'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Project/members:
    post:
      tags:
        - Project
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectMemberCreateDto'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberReadDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Project/{projectId}/lists':
    post:
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ListCreateDto'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ListReadDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListReadDto'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}':
    get:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskReadDto'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Task:
    get:
      tags:
        - Task
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskReadDto'
  '/api/v1/Task/{taskId}/move':
    post:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MoveTaskRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}/assignees':
    post:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AssignUserRequest'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskAssigneeReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskAssigneeReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskAssigneeReadDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssigneeReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssigneeReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskAssigneeReadDto'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}/assignees/{userId}':
    delete:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Task/{taskId}/comments':
    get:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentReadDto'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentReadDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/login:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/me:
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User/register:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/User/{userId}':
    get:
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/User:
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Workspaces/{workspaceId}':
    delete:
      tags:
        - Workspaces
      summary: Deletes a workspace
      description: "Only workspace owners and administrators can delete workspaces.\r\nDeleting a workspace will also delete all associated projects, lists, and tasks."
      parameters:
        - name: workspaceId
          in: path
          description: The ID of the workspace to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workspace successfully deleted
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to delete the workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Workspaces
      summary: Retrieves a specific workspace by its ID
      description: "Returns detailed information about the workspace including:\r\n- Basic workspace information (name, owner, creation date)\r\n- List of workspace members and their access levels\r\n- Associated projects and their task lists"
      parameters:
        - name: workspaceId
          in: path
          description: The unique identifier of the workspace to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested workspace details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to this workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Workspaces
      summary: Updates an existing workspace
      description: "Only workspace owners and administrators can update workspace details.\r\nCurrently supports updating the workspace name only."
      parameters:
        - name: workspaceId
          in: path
          description: The ID of the workspace to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated workspace details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateDto'
      responses:
        '200':
          description: Workspace updated successfully
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have permission to update the workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Workspaces/members/access:
    put:
      tags:
        - Workspaces
      summary: Updates the access level of a workspace member
      description: "Requires the following permissions:\r\n- Admin access, or\r\n- Workspace Owner access level\r\n            \r\nAccess level restrictions:\r\n- Cannot assign higher access than your own level (except admins)\r\n- Cannot modify access if you're below Owner level\r\n- Cannot assign Admin level unless you are an Admin\r\n            \r\nAll project access levels for this member will be validated to ensure they don't\r\nexceed the new workspace access level."
      requestBody:
        description: The member elevation details including member ID and new access level
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberElevationDto'
      responses:
        '200':
          description: Member access level successfully updated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace member not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to modify access levels
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid elevation data provided
  /api/v1/Workspaces:
    get:
      tags:
        - Workspaces
      summary: Retrieves all workspaces accessible to the current user
      description: "For regular users, returns only workspaces where they are members.\r\nFor administrators, returns all workspaces in the system.\r\nThe response includes details about workspace members, projects, and associated lists."
      responses:
        '200':
          description: List of accessible workspaces
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceReadDto'
        '403':
          description: User is not authorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Workspaces
      summary: Creates a new workspace
      description: "Creates a new workspace and automatically:\r\n- Assigns the current user as the workspace owner\r\n- Adds the creator as a workspace member with Owner access level\r\n- Initializes an empty project list"
      requestBody:
        description: The workspace creation details
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
      responses:
        '201':
          description: Workspace created successfully
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceReadDto'
        '400':
          description: Invalid workspace data provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Workspaces/{workspaceId}/members':
    get:
      tags:
        - Workspaces
      summary: Retrieves all members of a specific workspace
      description: "Returns a list of all members in the workspace along with their access levels.\r\nOnly accessible to workspace members and administrators."
      parameters:
        - name: workspaceId
          in: path
          description: The ID of the workspace
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of workspace members
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to this workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Workspaces
      summary: Adds a new member to a workspace
      description: "Only workspace owners and administrators can add new members.\r\nThe access level assigned cannot be higher than the user performing the action."
      parameters:
        - name: workspaceId
          in: path
          description: The ID of the workspace
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The member details to add
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceMemberCreateDto'
      responses:
        '201':
          description: Member added successfully
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMemberReadDto'
        '404':
          description: Workspace or user not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: User is already a member
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Insufficient permissions to add members
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Workspaces/{workspaceId}/projects':
    get:
      tags:
        - Workspaces
      summary: Retrieves all projects in a workspace
      description: "Returns a list of all projects in the workspace.\r\nOnly accessible to workspace members and administrators."
      parameters:
        - name: workspaceId
          in: path
          description: The ID of the workspace
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of workspace projects
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReadDto'
        '404':
          description: Workspace not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: User does not have access to this workspace
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    AccessLevel:
      enum:
        - 0
        - 10
        - 20
        - 30
      type: integer
      format: int32
    AddCommentRequest:
      type: object
      properties:
        content:
          type: string
          nullable: true
      additionalProperties: false
    AssignUserRequest:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
      additionalProperties: false
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        task:
          $ref: '#/components/schemas/WorkTask'
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    CommentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
          nullable: true
        userId:
          type: string
          format: uuid
        content:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
        task:
          $ref: '#/components/schemas/TaskDto'
        user:
          $ref: '#/components/schemas/UserDto'
      additionalProperties: false
    CommentReadDto:
      required:
        - content
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/UserReadDto'
      additionalProperties: false
    CreateCommentRequest:
      required:
        - content
      type: object
      properties:
        taskId:
          type: string
          format: uuid
        content:
          maxLength: 500
          minLength: 1
          type: string
      additionalProperties: false
    CurrentTaskStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ListCreateDto:
      required:
        - name
        - position
        - projectId
      type: object
      properties:
        projectId:
          pattern: '^[{(]?[0-9A-Fa-f]{8}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{4}[-]?[0-9A-Fa-f]{12}[)}]?$'
          type: string
          format: uuid
        name:
          maxLength: 20
          minLength: 3
          type: string
        position:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
      additionalProperties: false
    ListDto:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          maxLength: 100
          minLength: 1
          type: string
        position:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        project:
          $ref: '#/components/schemas/ProjectDto'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskDto'
          nullable: true
      additionalProperties: false
    ListReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        position:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
      additionalProperties: false
    ListUpdateDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 20
          minLength: 3
          type: string
          nullable: true
        position:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
      additionalProperties: false
    LoginResponse:
      required:
        - accessLevel
        - description
        - token
        - tokenType
      type: object
      properties:
        token:
          type: string
          nullable: true
        expires:
          type: string
          format: date-time
        tokenType:
          type: string
          nullable: true
        accessLevel:
          type: string
          nullable: true
        numericLevel:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
      additionalProperties: false
    MemberElevationDto:
      required:
        - memberId
        - newAccessLevel
      type: object
      properties:
        memberId:
          type: string
          format: uuid
        newAccessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    MoveTaskRequest:
      type: object
      properties:
        targetListId:
          type: string
          format: uuid
      additionalProperties: false
    Priority:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      format: int32
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    Project:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          minLength: 1
          type: string
        description:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
        createdDate:
          type: string
          format: date-time
        workspace:
          $ref: '#/components/schemas/Workspace'
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMember'
          nullable: true
        lists:
          type: array
          items:
            $ref: '#/components/schemas/TaskList'
          nullable: true
      additionalProperties: false
    ProjectCreateDto:
      required:
        - name
        - status
        - workspaceId
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        workspaceId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
          nullable: true
        endDate:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
      additionalProperties: false
    ProjectDto:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          maxLength: 100
          minLength: 1
          type: string
        description:
          maxLength: 500
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
        workspace:
          $ref: '#/components/schemas/WorkspaceDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberDto'
          nullable: true
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListDto'
          nullable: true
      additionalProperties: false
    ProjectMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        workspaceMemberId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
        project:
          $ref: '#/components/schemas/Project'
        workspaceMember:
          $ref: '#/components/schemas/WorkspaceMember'
      additionalProperties: false
    ProjectMemberCreateDto:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        workspaceMemberId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    ProjectMemberDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        workspaceMemberId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
        project:
          $ref: '#/components/schemas/ProjectDto'
        workspaceMember:
          $ref: '#/components/schemas/WorkspaceMemberDto'
      additionalProperties: false
    ProjectMemberReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        workspaceMemberId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
        workspaceMember:
          $ref: '#/components/schemas/WorkspaceMemberReadDto'
      additionalProperties: false
    ProjectReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
        createdDate:
          type: string
          format: date-time
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberReadDto'
          nullable: true
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListReadDto'
          nullable: true
      additionalProperties: false
    ProjectStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ProjectUpdateDto:
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
          nullable: true
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/ProjectStatus'
      additionalProperties: false
    RegisterDto:
      required:
        - accessLevel
        - email
        - name
        - password
        - username
      type: object
      properties:
        username:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        password:
          minLength: 6
          type: string
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    TaskAssignee:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        assignedDate:
          type: string
          format: date-time
        task:
          $ref: '#/components/schemas/WorkTask'
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    TaskAssigneeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        assignedDate:
          type: string
          format: date-time
        task:
          $ref: '#/components/schemas/TaskDto'
        user:
          $ref: '#/components/schemas/UserDto'
      additionalProperties: false
    TaskAssigneeReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        assignedDate:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/UserReadDto'
      additionalProperties: false
    TaskCreateDto:
      required:
        - name
        - status
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 3
          type: string
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        deadline:
          type: string
          format: date-time
          nullable: true
        projectId:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
      additionalProperties: false
    TaskDto:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 100
          minLength: 1
          type: string
        description:
          maxLength: 500
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        deadline:
          type: string
          format: date-time
          nullable: true
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
        projectId:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
        project:
          $ref: '#/components/schemas/ProjectDto'
        list:
          $ref: '#/components/schemas/ListDto'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssigneeDto'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
          nullable: true
      additionalProperties: false
    TaskList:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        position:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        project:
          $ref: '#/components/schemas/Project'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/WorkTask'
          nullable: true
      additionalProperties: false
    TaskReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        priority:
          $ref: '#/components/schemas/Priority'
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        deadline:
          type: string
          format: date-time
          nullable: true
        createdDate:
          type: string
          format: date-time
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssigneeDto'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentReadDto'
          nullable: true
        list:
          $ref: '#/components/schemas/ListReadDto'
        project:
          $ref: '#/components/schemas/ProjectReadDto'
      additionalProperties: false
    TaskUpdateDto:
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        description:
          maxLength: 100
          minLength: 3
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        deadline:
          type: string
          format: date-time
      additionalProperties: false
    TokenRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    UpdateCommentRequest:
      required:
        - content
      type: object
      properties:
        content:
          maxLength: 500
          minLength: 1
          type: string
      additionalProperties: false
    User:
      required:
        - email
        - name
        - passwordHash
        - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        passwordHash:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        workspaceMembers:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMember'
          nullable: true
        assignedTasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssignee'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          nullable: true
      additionalProperties: false
    UserDto:
      required:
        - accessLevel
        - email
        - name
        - passwordHash
        - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          maxLength: 50
          minLength: 1
          type: string
        name:
          maxLength: 100
          minLength: 1
          type: string
        email:
          maxLength: 100
          minLength: 1
          type: string
          format: email
        passwordHash:
          minLength: 1
          type: string
        isActive:
          type: boolean
        createdDate:
          type: string
          format: date-time
        workspaceMembers:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMemberDto'
          nullable: true
        assignedTasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssigneeDto'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
          nullable: true
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    UserReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    WorkTask:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          minLength: 1
          type: string
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/CurrentTaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        deadline:
          type: string
          format: date-time
          nullable: true
        createdDate:
          type: string
          format: date-time
        projectId:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
        project:
          $ref: '#/components/schemas/Project'
        list:
          $ref: '#/components/schemas/TaskList'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssignee'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          nullable: true
      additionalProperties: false
    Workspace:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        ownerId:
          type: string
          format: uuid
        createdDate:
          type: string
          format: date-time
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMember'
          nullable: true
      additionalProperties: false
    WorkspaceCreateDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
      additionalProperties: false
    WorkspaceDto:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 100
          minLength: 1
          type: string
        description:
          maxLength: 500
          type: string
          nullable: true
        ownerId:
          type: string
          format: uuid
        createdDate:
          type: string
          format: date-time
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDto'
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMemberDto'
          nullable: true
      additionalProperties: false
    WorkspaceMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
        workspace:
          $ref: '#/components/schemas/Workspace'
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    WorkspaceMemberCreateDto:
      required:
        - accessLevel
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
      additionalProperties: false
    WorkspaceMemberDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
        workspace:
          $ref: '#/components/schemas/WorkspaceDto'
        user:
          $ref: '#/components/schemas/UserDto'
      additionalProperties: false
    WorkspaceMemberReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        createdDate:
          type: string
          format: date-time
      additionalProperties: false
    WorkspaceReadDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        ownerId:
          type: string
          format: uuid
        createdDate:
          type: string
          format: date-time
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectReadDto'
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMemberReadDto'
          nullable: true
      additionalProperties: false
    WorkspaceUpdateDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 3
          type: string
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: JWT Authorization header using the Bearer scheme
      scheme: bearer
security:
  - Bearer: [ ]