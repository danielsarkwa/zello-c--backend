openapi: 3.0.0
info:
  title: Simplified Trello API
  version: 1.0.0
  description: |-
    A simplified version of Trello's API for managing projects, lists, and cards. This API allows users to:
    - Create and manage projects with lists
    - Organize work using lists and cards
    - Collaborate with team members
    - Track work progress and deadlines
    
    ### Todo
    1. Basic CRUD operations for existing resources (GET/PUT/DELETE endpoints)
    2. Card movement functionality (between lists)
    3. Activity tracking and audit logs
    4. Common Trello features like comments and attachments
servers:
  - url: http://localhost:3000/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    SystemRole:
      type: string
      enum:
        - admin
        - user
      description: |
        System-wide role levels:
        * admin - Can manage all users and workspaces
        * user - Regular user with ability to create workspaces

    Workspace:
      description: Represents an organization or team workspace that contains multiple projects
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174010
        name:
          type: string
          example: Engineering Team
        description:
          type: string
          example: Main workspace for the engineering department
        ownerId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        settings:
          type: object
          properties:
            defaultTaskTemplate:
              type: object
            defaultIssueTemplate:
              type: object
            allowedLabels:
              type: array
              items:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WorkspaceMember:
      description: Represents a user's membership and role in a workspace
      type: object
      properties:
        workspaceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - owner    # Full control over workspace, can manage all aspects
            - admin    # Can manage users and settings
            - user     # Can create and manage cards
            - guest    # View and comment only
          description: |
            Workspace role levels:
            * owner - Full control, can delete workspace
            * admin - Can manage users and settings
            * user - Can create and manage cards
            * guest - View and comment only
          example: user
        permissions:
          type: array
          items:
            type: string
            enum:
              - manage_workspace      # Delete workspace, change critical settings
              - manage_members       # Add/remove members, change roles
              - create_project      # Create new projects
              - manage_lists       # Add/modify/delete lists
              - manage_cards      # Create/edit/delete cards
              - comment          # Add comments to cards
              - view            # View workspace content

    Project:
      description: Represents a project with its lists and settings
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
          example: User Authentication Service
        description:
          type: string
        type:
          type: string
          enum:
            - scrum
            - kanban
            - basic
        settings:
          type: object
          properties:
            sprintDuration:
              type: integer
            pointScale:
              type: string
            defaultEstimateUnit:
              type: string
        status:
          type: string
          enum:
            - active
            - archived
            - completed
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectMember:
      description: Represents a user's membership and role in a project
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - admin
            - member
            - viewer
          description: 'admin: full control, member: can edit, viewer: read-only'
          example: member

    List:
      description: Represents a column in a project (e.g., 'To Do', 'In Progress', 'Done')
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        projectId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        title:
          type: string
          example: In Progress
        position:
          type: integer
          description: Order of the list in the project (0-based)
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'

    Card:
      description: Represents a task or item within a list
      type: object
      required:
        - title
      properties:
        # Base properties
        id:
          type: string
          format: uuid
        listId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        position:
          type: integer
        dueDate:
          type: string
          format: date-time
        # Task management properties
        priority:
          type: string
          enum: [ low, medium, high, urgent ]
        assignees:
          type: array
          items:
            type: string
            format: uuid
        status:
          type: string
          enum: [ todo, in_progress, blocked, review, done ]
        labels:
          type: array
          items:
            type: string
        attachments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              filename:
                type: string
              url:
                type: string
              uploadedBy:
                type: string
                format: uuid
              uploadedAt:
                type: string
                format: date-time
        estimate:
          type: number
          description: Estimated effort/time in the project's default unit
        checklists:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    text:
                      type: string
                    checked:
                      type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time


    CustomRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "HR Manager"
        permissions:
          type: array
          items:
            type: string
        workspaceId:
          type: string
          format: uuid

    ActivityLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        entityType:
          type: string
          enum: [ workspace, project, list, card ]
        entityId:
          type: string
          format: uuid
        action:
          type: string
          enum: [ created, updated, deleted, moved ]
        userId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        details:
          type: object

    User:
      description: Represents a user in the system
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: john.doe@example.com
        name:
          type: string
          example: John Doe
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'

    AuthToken:
      description: Authentication tokens for API access
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600

    Error:
      type: object
      properties:
        message:
          type: string
          example: Invalid request parameters
        code:
          type: string
          example: INVALID_PARAMETERS

security:
  - bearerAuth: [ ]

paths:

  /search:
    get:
      summary: Search across all resources
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
        - name: type
          in: query
          schema:
            type: string
            enum: [ workspace, project, list, card ]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  workspaces:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workspace'
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/List'
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /cards/{cardId}:
    get:
      summary: Get card details
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Card not found

    put:
      summary: Update card
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                position:
                  type: integer
                dueDate:
                  type: string
                  format: date-time
                priority:
                  type: string
                  enum: [ low, medium, high, urgent ]
                assignees:
                  type: array
                  items:
                    type: string
                    format: uuid
                status:
                  type: string
                  enum: [ todo, in_progress, blocked, review, done ]
                labels:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Card updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '403':
          description: Insufficient permissions
        '404':
          description: Card not found

    delete:
      summary: Delete card
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card deleted
        '403':
          description: Insufficient permissions
        '404':
          description: Card not found

  /cards/{cardId}/move:
    post:
      summary: Move a card to a different list
      description: Moves a card to a specified position in a target list
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetListId
                - position
              properties:
                targetListId:
                  type: string
                  format: uuid
                  description: ID of the list to move the card to
                position:
                  type: integer
                  description: New position in target list (0-based)
            example:
              targetListId: "123e4567-e89b-12d3-a456-426614174002"
              position: 2
      responses:
        '200':
          description: Card successfully moved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidPosition:
                  value:
                    message: "Invalid position specified"
                    code: "INVALID_POSITION"
                invalidList:
                  value:
                    message: "Target list must be in the same project"
                    code: "INVALID_LIST"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions to move card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Card or target list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - card position already occupied or list is locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/custom-roles:
    post:
      summary: Create a custom role
      description: Creates a new custom role within a workspace with specified permissions
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the workspace to create the custom role in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - permissions
              properties:
                name:
                  type: string
                  example: "Technical Lead"
                  minLength: 1
                  maxLength: 50
                description:
                  type: string
                  example: "Role for technical team leaders"
                permissions:
                  type: array
                  items:
                    type: string
                    enum:
                      - manage_workspace
                      - manage_members
                      - create_project
                      - manage_lists
                      - manage_cards
                      - comment
                      - view
            example:
              name: "Technical Lead"
              description: "Role for technical team leaders"
              permissions: [
                "create_project",
                "manage_lists",
                "manage_cards",
                "comment",
                "view"
              ]
      responses:
        '201':
          description: Custom role successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRole'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidName:
                  value:
                    message: "Role name must be between 1 and 50 characters"
                    code: "INVALID_NAME"
                invalidPermissions:
                  value:
                    message: "Invalid permissions specified"
                    code: "INVALID_PERMISSIONS"
                duplicateName:
                  value:
                    message: "Role name already exists in workspace"
                    code: "DUPLICATE_NAME"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions to create custom roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Only workspace admins can create custom roles"
                code: "INSUFFICIENT_PERMISSIONS"
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Workspace not found"
                code: "WORKSPACE_NOT_FOUND"
        '409':
          description: Conflict - maximum number of custom roles reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Maximum number of custom roles (10) reached for workspace"
                code: "MAX_ROLES_REACHED"

  /cards/{cardId}/comments:
    post:
      summary: Add a comment to a card
      description: Creates a new comment on a card. Supports threaded discussions through optional parentId
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the card to comment on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: The comment text, supports markdown formatting
                parentId:
                  type: string
                  format: uuid
                  description: ID of parent comment for threaded discussions
                mentions:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of user IDs mentioned in the comment
            example:
              content: "We should consider using a different color scheme for this component."
              mentions: [ "123e4567-e89b-12d3-a456-426614174000" ]
      responses:
        '201':
          description: Comment successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  cardId:
                    type: string
                    format: uuid
                  parentId:
                    type: string
                    format: uuid
                  content:
                    type: string
                  authorId:
                    type: string
                    format: uuid
                  mentions:
                    type: array
                    items:
                      type: string
                      format: uuid
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                emptyContent:
                  value:
                    message: "Comment content cannot be empty"
                    code: "EMPTY_CONTENT"
                contentTooLong:
                  value:
                    message: "Comment exceeds maximum length of 10000 characters"
                    code: "CONTENT_TOO_LONG"
                invalidParentId:
                  value:
                    message: "Parent comment does not exist or belongs to different card"
                    code: "INVALID_PARENT_COMMENT"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions to comment on card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "User does not have comment permission in this workspace"
                code: "INSUFFICIENT_PERMISSIONS"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many comments in short time period
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Comment rate limit exceeded. Please wait a few minutes."
                code: "RATE_LIMIT_EXCEEDED"

    get:
      summary: Get card comments
      description: Retrieves comments for a card with optional pagination and threading
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the card to get comments for
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter to get replies to a specific comment
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          schema:
            type: string
            enum: [ newest, oldest ]
            default: newest
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        cardId:
                          type: string
                          format: uuid
                        parentId:
                          type: string
                          format: uuid
                        content:
                          type: string
                        authorId:
                          type: string
                          format: uuid
                        mentions:
                          type: array
                          items:
                            type: string
                            format: uuid
                        replyCount:
                          type: integer
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions to view card comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /activities:
    get:
      summary: Get activity feed
      parameters:
        - name: entityType
          in: query
          schema:
            type: string
            enum: [ workspace, project, list, card ]
        - name: entityId
          in: query
          schema:
            type: string
            format: uuid
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Activity log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityLog'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer


  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account in the system
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
            example:
              email: jane.smith@example.com
              password: securePassword123
              name: Jane Smith
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns access and refresh tokens
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
            example:
              email: jane.smith@example.com
              password: securePassword123
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      description: Invalidates the current refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/password/reset-request:
    post:
      summary: Request password reset
      description: Sends a password reset link to the user's email
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
            example:
              email: jane.smith@example.com
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset instructions sent to email

  /auth/password/reset:
    post:
      summary: Reset password
      description: Reset password using the token received via email
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
            example:
              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              newPassword: newSecurePassword123
      responses:
        '200':
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password successfully reset
        '400':
          description: Invalid password format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or expired reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces:
    get:
      summary: List all workspaces
      description: Retrieves all workspaces the authenticated user has access to
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          schema:
            type: string
            enum: [ name_asc, name_desc, created_asc, created_desc ]
            default: created_desc
      responses:
        '200':
          description: List of workspaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workspace'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /workspaces/{workspaceId}/projects:
    get:
      summary: List projects in workspace
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [ active, archived, completed ]
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /workspaces/{workspaceId}:
    get:
      summary: Get workspace details
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update workspace
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                settings:
                  type: object
                  properties:
                    defaultTaskTemplate:
                      type: object
                    defaultIssueTemplate:
                      type: object
                    allowedLabels:
                      type: array
                      items:
                        type: string
      responses:
        '200':
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '403':
          description: Insufficient permissions
        '404':
          description: Workspace not found

    delete:
      summary: Delete workspace
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workspace deleted
        '403':
          description: Insufficient permissions
        '404':
          description: Workspace not found

  /workspaces/{workspaceId}/members:
    post:
      summary: Add or update workspace member
      description: Add a new member or update existing member's role (cannot elevate above own role level)
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum:
                    - admin
                    - user
                    - guest
            example:
              userId: "123e4567-e89b-12d3-a456-426614174000"
              role: "user"
              permissions:
                - "create_project"
                - "manage_cards"
                - "comment"
                - "view"

      responses:
        '201':
          description: Member successfully added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMember'
        '403':
          description: Insufficient permissions or attempting to elevate above own role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /system/users/{userId}/role:
    put:
      summary: Update user's system role
      description: Update a user's system-wide role (Admin only)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            example:
              role: "admin"
              reason: "Promoting to handle system-wide configurations"
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  $ref: '#/components/schemas/SystemRole'
      responses:
        '200':
          description: User role updated successfully
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}:
    get:
      summary: Get project details
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found

    put:
      summary: Update project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  type: string
                  enum: [ scrum, kanban, basic ]
                status:
                  type: string
                  enum: [ active, archived, completed ]
                settings:
                  type: object
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          description: Insufficient permissions
        '404':
          description: Project not found

    delete:
      summary: Delete project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted
        '403':
          description: Insufficient permissions
        '404':
          description: Project not found


  '/projects/{projectId}/lists':
    post:
      summary: Create a new list
      description: Creates a new list within a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                position:
                  type: integer
            example:
              title: In Progress
              position: 1
      responses:
        '201':
          description: List successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lists/{listId}:
    get:
      summary: Get list details
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '404':
          description: List not found

    put:
      summary: Update list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                position:
                  type: integer
      responses:
        '200':
          description: List updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '403':
          description: Insufficient permissions
        '404':
          description: List not found

    delete:
      summary: Delete list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: List deleted
        '403':
          description: Insufficient permissions
        '404':
          description: List not found


  '/lists/{listId}/cards':
    post:
      summary: Create a new card
      description: Creates a new card within a list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                description:
                  type: string
                position:
                  type: integer
                dueDate:
                  type: string
                  format: date-time
            example:
              title: Design social media graphics
              description: Create banner images for Facebook and Twitter
              position: 0
              dueDate: '2024-01-20T17:00:00Z'
      responses:
        '201':
          description: Card successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/projects/{projectId}/members':
    post:
      summary: Add member to project
      description: Adds a new member to the project with specified role
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum:
                    - admin
                    - member
                    - viewer
            example:
              userId: "123e4567-e89b-12d3-a456-426614174000"
              role: "member"
              permissions:
                - "manage_cards"
                - "comment"
                - "view"
      responses:
        '201':
          description: Member successfully added to project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMember'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'